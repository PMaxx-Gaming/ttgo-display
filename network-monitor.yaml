substitutions:
  unificontroller: https://192.168.1.100:8443 #SET THIS TO THE IP AND PORT OF YOUR UNIFI CONTROLLER
  username: !secret unifi_user
  password: !secret unifi_pass
  session: !secret unifi_session
  icon_lan: 󰌗
  icon_wan: 󰖟
  icon_wlan: 󰖩
  icon_upload: 󰧇
  icon_download: 󰦿
  icon_unifi: 󰻃
  icon_speed: 󰓅
  icon_adguard: 󰕥
  icon_dnsblocked: 󰦀
  icon_dnsqueries: 󰍉
  icon_proxmox: 󰛉
  icon_homeassistant: 󰟐
  icon_online: 󰗠
  icon_offline: 󰅙 

globals:
  - id: unifisession
    type: std::string
    initial_value: ${session}
  
esphome:
  name: network-monitor
  platform: ESP32
  board: featheresp32
    # Power up server when power restored # 
  on_boot:
    priority: -100.0
    then:
      if:
        condition:
          binary_sensor.is_off: server_status
        then:
          - switch.turn_on: power_on
logger:
  logs:
    ping_esp32: WARN
api:
captive_portal:
http_request:
  id: http_component
ota:
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Network Monitor Fallback Hotspot"
    password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.2.5 #SET TO YOUR DEVICE'S IP
    gateway: 192.168.2.1 #SET TO YOUR NETWORK'S GATEWAY
    subnet: 255.255.255.0
  fast_connect: on
  power_save_mode: none
external_components:
  - source:
      type: local
      path: ./components/
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19
  
time:
  - platform: sntp
    id: esptime
    on_time:
      - seconds: /30
        then:
          - http_request.post:
              url: ${unificontroller}/api/login
              verify_ssl: false
              json: |-
                root["username"] = ${username};
                root["password"] = ${password};
              on_response:
                then:
                  - if:
                      condition:
                        lambda: |-
                          return status_code == 200;
                      then:
                        - logger.log:
                            level: INFO
                            format: "!! CONNECTION TO UNIFI CONTROLLER SUCCEEDED, FETCHING SENSOR DATA !!"
                        - lambda: "id(unifi_api).publish_state(true);"
                        - delay: 1s                     
                        - http_request.get:
                            url: ${unificontroller}/api/s/default/stat/health
                            verify_ssl: false
                            headers:
                              Cookie: !lambda return id(unifisession).c_str();
                            on_response:
                              - lambda: |-
                                  std::string data = id(http_component).get_string();
                                  json::parse_json(data, [](JsonObject root) {
                                  uint16_t num_wifiusers_int = root["data"][0]["num_user"];
                                  uint16_t num_wiredusers_int = root["data"][3]["num_user"];
                                  id(clients_wireless).publish_state(num_wifiusers_int);
                                  id(clients_wired).publish_state(num_wiredusers_int);
                                  });
                      else:
                        - logger.log:
                            level: INFO
                            format: "!! CONNECTION TO UNIFI CONTROLLER FAILED !!"
                        - lambda: "id(unifi_api).publish_state(false);"

    
    ##### FONTS #####

font:
    # Footer Text #
  - file: 'fonts/calibri.ttf'
    id: calibri_14
    size: 14
    
    # Header Text #
  - file: 'fonts/calibri.ttf'
    id: calibri_24
    size: 24
    
    # Sensor Value #
  - file: 'fonts/calibri.ttf'
    id: calibri_36
    size: 36
      
    # Main Icons #  
  - file: 'fonts/mdi.ttf'
    id: mdi_36
    size: 36
    glyphs: [
      "󰌗", #LAN
      "󰖟", #WAN
      "󰖩", #WLAN
      "󰧇", #Upload
      "󰦿", #Download
      "󰻃", #Unifi Controller
      "󰓅", #Ping
      "󰕥", #AdGuard
      "󰦀", #DNS Blocked
      "󰍉", #DNS Queries
      ]
    
    # Network Status Icons #
  - file: 'fonts/mdi.ttf'
    id: mdi_24
    size: 24
    glyphs: [
      "󰛉", #Proxmox
      "󰟐", #Home Assistant
      "󰖟", #WAN
      "󰕥", #AdGuard
      "󰅙", #Offline
      "󰗠", #Online
      ]


    ##### COLORS #####

color:
    # Header/Footer #
  - id: grey
    red: 50%
    green: 50%
    blue: 50%
    
    # Main Text #
  - id: white
    red: 85%
    green: 85%
    blue: 85%
    
    # Icons/Dividers #
  - id: darkgrey
    red: 25%
    green: 25%
    blue: 25%
    
    # Online #
  - id: green
    red: 0%
    green: 100%
    blue: 0%
    
    # Offline #
  - id: red
    red: 100%
    green: 0%
    blue: 0%
    
    # Proxmox #
  - id: orange
    red: 90%
    green: 51%
    blue: 2%
    
    # Home Assistant #
  - id: lightblue
    red: 21%
    green: 78%
    blue: 100%
    
    # WAN #
  - id: medblue
    red: 29%
    green: 50%
    blue: 88%
    
    # AdGuard #
  - id: darkgreen
    red: 0%
    green: 57%
    blue: 15%
    

    ##### SWITCHES #####    
    
switch:
    # Display ON/OFF #
  - platform: gpio
    name: "Backlight"
    id: backlight  
    pin: GPIO4 
    icon: "mdi:white-balance-sunny"
    restore_mode: restore_default_on

    # Proxmox Server Power Switch #
  - platform: gpio
    name: "Power ON"
    id: power_on
    pin: GPIO27
    icon: "mdi:power"
    on_turn_on:
    - delay: 1000ms
    - switch.turn_off: power_on
  - platform: gpio
    name: "Power OFF"
    id: power_off
    pin: GPIO27
    icon: "mdi:power"
    on_turn_on:
    - delay: 5000ms
    - switch.turn_off: power_off      


    ##### SENSORS #####

text_sensor:
  - platform: homeassistant
    entity_id: sensor.local_ip
    name: "Unifi Controller IP"
    id: unifi_ip
    internal: true
  
  - platform: homeassistant
    entity_id: switch.adguard_filtering
    name: "AdGuard Filtering"
    id: adguard_switch
    internal: true

sensor: 
  - platform: template
    name: "Number of Wireless Clients"
    id: clients_wireless
    
  - platform: template
    name: "Number of Wired Clients"
    id: clients_wired
    
  - platform: ping
    ip_address: 8.8.8.8 #Change to any IP address you'd like to ping; this one is Cloudflare
    num_attempts: 5
    timeout: 1sec
    update_interval: 5s
    loss:
      name: "Packet loss"
    latency:
      name: "Latency"
      unit_of_measurement: ms
      accuracy_decimals: 3
      id: esp_ping
      filters:
       - multiply: 1000
       
  - platform: homeassistant
    entity_id: sensor.adguard_average_processing_speed
    name: "AdGuard Processing Speed"
    id: adguard_speed
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.adguard_dns_queries
    filters:
      - multiply: 0.001
    name: "AdGuard Queries"
    id: adguard_queries
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.speedtest_download
    name: "Download Speed"
    unit_of_measurement: "Mbit/s"
    id: download_speed
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.speedtest_upload
    name: "Upload Speed"
    unit_of_measurement: "Mbit/s"
    id: upload_speed
    internal: true
    
  - platform: homeassistant
    entity_id: sensor.adguard_dns_queries_blocked_ratio
    name: "DNS Queries Blocked"
    unit_of_measurement: "%"
    id: dns_blocked
    internal: true


    ##### Server Status and Onboard Buttons #####

binary_sensor:
  - platform: template
    name: "Internet Connection"
    id: wan_status
    on_press:
      then:
        - logger.log:
            level: INFO
            format: "!! INTERNET IS CONNECTED !!"
    on_release:
      then:
        - logger.log:
            level: INFO
            format: "!! INTERNET IS DISCONNECTED !!"
    lambda: |-
      if (id(esp_ping).state > 0) {
        return true;
      } else {
        return false;
      }  
        
  - platform: status
    name: "Home Assistant Server Status"
    id: ha_status  
    internal: true
    on_press:
      then:
        - logger.log:
            level: INFO
            format: "!! CONNECTION TO HOME ASSISTANT HAS BEEN ESTABLISHED !!"
    on_release:
      then:
        - logger.log:
            level: INFO
            format: "!! CONNECTION TO HOME ASSISTANT HAS BEEN LOST !!"
  
  - platform: template
    name: "Unifi API Connection"
    id: unifi_api
    on_press:
      then:
        - logger.log:
            level: INFO
            format: "!! CONNECTED TO UNIFI CONTROLLER API !!"
    on_release:
      then:
        - logger.log:
            level: INFO
            format: "!! DISCONNECTED FROM UNIFI CONTROLLER API !!"
  
  - platform: gpio
    name: "Server Status"
    id: server_status
    internal: true
    pin:
      number: GPIO13
      mode: input_pullup
      inverted: true
    on_press:
      then:
        - logger.log:
            level: INFO
            format: "!! SERVER POWER HAS BEEN RESTORED !!"
    on_release:
      then:
        - logger.log:
            level: INFO
            format: "!! SERVER HAS SHUT DOWN !!"
        - delay: 3000ms
        - switch.turn_on: power_on
      
    # Onboard Buttons #
  - platform: gpio
    name: "Button 2"
    id: button_2
    internal: true
    pin:
      number: GPIO35
      inverted: true
    on_click:
      - min_length: 1500ms
        max_length: 3000ms
        then:
          - switch.turn_off: backlight  
    on_press:
      then:
        - display.page.show_previous: proxmox_display
        - component.update: proxmox_display        
        
  - platform: gpio
    name: "Button 1"
    id: button_1
    internal: true
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    on_click:
      - min_length: 1500ms
        max_length: 3000ms
        then:
          - switch.turn_on: backlight
    on_press:
      then:
        - display.page.show_next: proxmox_display
        - component.update: proxmox_display        


    ##### DISPLAY #####

display:
  - platform: st7789v
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
### DO NOT CHANGE VALUES ABOVE THIS LINE ###
    rotation: 270°
    update_interval: 5s
    id: proxmox_display
    
    pages:      
      - id: page1 ### Network Info ###
        lambda: |-
          it.line(200, 5, 200, 115, id(darkgrey));
          it.line(5, 115, 235, 115, id(darkgrey));
          it.print(5,5, id(mdi_24), id(orange), "$icon_proxmox");
          it.print(30, 7, id(calibri_24), id(white), "Proxmox Server");
          if (id(proxmox_status).state) {
            it.print(235, 5, id(mdi_24), id(green), TextAlign::RIGHT, "$icon_online");
          }
          else {
            it.print(235, 5, id(mdi_24), id(red), TextAlign::RIGHT, "$icon_offline");
          }
          
          it.print(5,32, id(mdi_24), id(lightblue), "$icon_homeassistant");
          it.print(30, 34, id(calibri_24), id(white), "Home Assistant");
          if (id(ha_status).state) {
            it.print(235, 32, id(mdi_24), id(green), TextAlign::RIGHT, "$icon_online");
          }
          else {
            it.print(235, 32, id(mdi_24), id(red), TextAlign::RIGHT, "$icon_offline");
          }
      
          it.print(5,59, id(mdi_24), id(medblue), "$icon_wan");
          it.print(30, 61, id(calibri_24), id(white), "WAN Status");      
          if (id(wan_status).state) {
            it.print(235, 59, id(mdi_24), id(green), TextAlign::RIGHT, "$icon_online");
          }
          else {
            it.print(235, 59, id(mdi_24), id(red), TextAlign::RIGHT, "$icon_offline");
          }
      
          it.print(5,86, id(mdi_24), id(darkgreen), "$icon_adguard");
          it.print(30, 88, id(calibri_24), id(white), "AdGuard Home");    
          if (id(adguard_switch).state == "on") {
            it.print(235, 86, id(mdi_24), id(green), TextAlign::RIGHT, "$icon_online");
          }
          else {
            it.print(235, 86, id(mdi_24), id(red), TextAlign::RIGHT, "$icon_offline");
          }
          
          it.printf(120, 125, id(calibri_14), id(grey), TextAlign::CENTER, " Controller IP: %s", id(unifi_ip).state.c_str());   

      - id: page2 ### Home Network ###
        lambda: |-
          it.print(30, 5, id(mdi_36), id(white), "$icon_unifi");
          it.printf(70, 12, id(calibri_24), id(grey), "%s", id(unifi_ip).state.c_str());  
          it.print(5, 40, id(mdi_36), id(darkgrey), TextAlign::LEFT, "$icon_download");
          it.printf(45, 43, id(calibri_36), id(white), TextAlign::LEFT, "%.1f", id(download_speed).state);
          it.print(235, 40, id(mdi_36), id(darkgrey), TextAlign::RIGHT, "$icon_upload");
          it.printf(195, 43, id(calibri_36), id(white), TextAlign::RIGHT, "%.1f", id(upload_speed).state);
          it.line(5, 80, 235, 80, id(darkgrey));
          it.print(5, 90, id(mdi_36), id(darkgrey), TextAlign::LEFT, "$icon_lan" );
          it.printf(45, 93, id(calibri_36), id(white), TextAlign::LEFT, "%.0f", id(clients_wired).state);
          it.print(235, 90, id(mdi_36), id(darkgrey), TextAlign::RIGHT, "$icon_wlan" );
          it.printf(195, 93, id(calibri_36), id(white), TextAlign::RIGHT, "%.0f", id(clients_wireless).state);
          
      - id: page3 ### Performance ###
        lambda: |-
          it.print(30, 5, id(mdi_36), id(white), "$icon_speed");
          it.print(70, 12, id(calibri_24), id(grey), "Performance");
          it.print(235, 40, id(mdi_36), id(darkgrey), TextAlign::RIGHT, "$icon_speed");
          it.printf(195, 43, id(calibri_36), id(white), TextAlign::RIGHT, "%.0fms", id(esp_ping).state);
          it.line(5, 80, 235, 80, id(darkgrey));
          it.print(5, 90, id(mdi_36), id(darkgrey), TextAlign::LEFT, "$icon_download");
          it.printf(45, 93, id(calibri_36), id(white), TextAlign::LEFT, "%.1f", id(download_speed).state);
          it.print(235, 90, id(mdi_36), id(darkgrey), TextAlign::RIGHT, "$icon_upload");
          it.printf(195, 93, id(calibri_36), id(white), TextAlign::RIGHT, "%.1f", id(upload_speed).state);
          
      - id: page4 ### AdGuard Home ###
        lambda: |-
          it.print(30, 5, id(mdi_36), id(white), "$icon_adguard");
          it.print(70, 12, id(calibri_24), id(grey), "AdGuard Home");
          it.print(235, 40, id(mdi_36), id(darkgrey), TextAlign::RIGHT, "$icon_dnsblocked");
          it.printf(195, 43, id(calibri_36), id(white), TextAlign::RIGHT, "%.1f%%", id(dns_blocked).state);
          it.line(5, 80, 235, 80, id(darkgrey));
          it.print(5, 90, id(mdi_36), id(darkgrey), TextAlign::LEFT, "$icon_speed" );
          it.printf(45, 98, id(calibri_24), id(white), TextAlign::LEFT, "%.0fms", id(adguard_speed).state);
          it.print(235, 90, id(mdi_36), id(darkgrey), TextAlign::RIGHT, "$icon_dnsqueries" );
          it.printf(195, 98, id(calibri_24), id(white), TextAlign::RIGHT, "%.1fk", id(adguard_queries).state);
          

      
